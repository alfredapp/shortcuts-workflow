<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.alfredapp.shortcuts</string>
	<key>connections</key>
	<dict>
		<key>0A77AD31-D9B7-4FE5-869D-ADAB4C03C845</key>
		<array/>
		<key>1323F48F-E437-45DD-B8A6-33410D2A376D</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0A77AD31-D9B7-4FE5-869D-ADAB4C03C845</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>1536051B-9614-43F1-BAFF-69157E7507B5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FA9FFB07-7249-47A4-A6CE-FB08B23064F9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>1DFB80A0-3BC8-4D10-B25F-5738F65D531B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>4CA0F7EA-3AF3-48FB-9F9A-AEF9797EDC3B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<true/>
			</dict>
		</array>
		<key>6492FB28-292F-4EBA-AC97-1757CD7D9B1A</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>A4E64080-1FE3-4DC7-B236-87D07ED268B1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8AD8B6B2-7CFD-4111-B81C-69158A3E4D4C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1DFB80A0-3BC8-4D10-B25F-5738F65D531B</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>A4E64080-1FE3-4DC7-B236-87D07ED268B1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>1536051B-9614-43F1-BAFF-69157E7507B5</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B6B11028-3EFA-4B12-A13A-D2E45B31EEDB</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>CFFE2B9A-5D09-42D3-AA37-04D143AD527C</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>BA85DFB6-430D-4198-BB43-D7C2754CBB51</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>005F1932-2C11-4E8E-823D-099B3FC1C00D</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>CFFE2B9A-5D09-42D3-AA37-04D143AD527C</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FA9FFB07-7249-47A4-A6CE-FB08B23064F9</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>6492FB28-292F-4EBA-AC97-1757CD7D9B1A</string>
				<key>modifiers</key>
				<integer>1048576</integer>
				<key>modifiersubtext</key>
				<string>Run with argument</string>
				<key>vitoclose</key>
				<true/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>1323F48F-E437-45DD-B8A6-33410D2A376D</string>
				<key>modifiers</key>
				<integer>524288</integer>
				<key>modifiersubtext</key>
				<string>Edit shortcut</string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FA9FFB07-7249-47A4-A6CE-FB08B23064F9</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>BA85DFB6-430D-4198-BB43-D7C2754CBB51</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>Vítor Galvão</string>
	<key>description</key>
	<string>Run installled macOS shortcuts</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Shortcuts</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsfiles</key>
				<false/>
				<key>acceptsmulti</key>
				<integer>0</integer>
				<key>acceptstext</key>
				<true/>
				<key>acceptsurls</key>
				<true/>
				<key>name</key>
				<string>Run shortcut</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.universalaction</string>
			<key>uid</key>
			<string>8AD8B6B2-7CFD-4111-B81C-69158A3E4D4C</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string></string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>argument</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>1DFB80A0-3BC8-4D10-B25F-5738F65D531B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>readonly tmp_file="${1}"

if [[ -n "${input_paths}" ]]; then
  IFS=$'\t\n' read -d '' -ra path_array &lt;&lt;&lt; "${input_paths}"
  /usr/bin/shortcuts run "$(&lt; "${tmp_file}")" --input-path "${path_array[@]}"
else
  /usr/bin/shortcuts run "$(&lt; "${tmp_file}")" &lt;&lt;&lt; "${argument}"
fi

rm "${tmp_file}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>BA85DFB6-430D-4198-BB43-D7C2754CBB51</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>2</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>sc</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Getting shortcuts…</string>
				<key>script</key>
				<string>// Get STDOUT from command, as array split from newlines, without empty elements
function linesFromCommand(arguments) {
  const task = $.NSTask.alloc.init
  const stdout = $.NSPipe.pipe

  task.executableURL = $.NSURL.alloc.initFileURLWithPath(arguments[0])
  task.arguments = arguments.slice(1)
  task.standardOutput = stdout
  task.launchAndReturnError(false)

  const dataOut = stdout.fileHandleForReading.readDataToEndOfFile
  const stringOut = $.NSString.alloc.initWithDataEncoding(dataOut, $.NSUTF8StringEncoding).js

  return stringOut.split("\n").filter(line =&gt; line)
}

// Array of arrays, listing shortcuts and their directories
const shortcutsList = (function() {
  let list = []
  let uncategorised = linesFromCommand(["/usr/bin/shortcuts", "list"])
  const folders = linesFromCommand(["/usr/bin/shortcuts", "list", "--folders"])

  // Add shortcuts with folders to final list
  folders
    .forEach(folder =&gt; { // For each folder
      linesFromCommand(["/usr/bin/shortcuts", "list", "--folder-name", folder])
        .forEach(shortcut =&gt; { // For each shortcut in folder
          uncategorised.splice(uncategorised.indexOf(shortcut), 1) // Remove from uncategorised
          list.push([shortcut, folder])
        })
    })

  // Add folderless shortcuts to final list
  uncategorised.forEach(shortcut =&gt; list.push([shortcut, ""]))

  return list
})()

// Build items
const sfItems = shortcutsList.map(categorised =&gt; {
  const shortcut = categorised[0]
  const folder = categorised[1]

  const subtitle = (function() {
    // If an argument has been specified
    const envArgument = $.NSProcessInfo.processInfo.environment.objectForKey("argument").js
    if (envArgument) return "Argument: " + envArgument

    // If input paths have been specificed
    const envInputPaths = $.NSProcessInfo.processInfo.environment.objectForKey("input_paths").js

    if (envInputPaths) {
      const splitPaths = envInputPaths.split("\t")
      if (splitPaths.length &gt; 1) return "Paths: " + splitPaths.join(", ")
      return "Path: " + splitPaths[0]
    }

    // Else return folder name
    return folder
  })()

  return {
    "uid": shortcut + " " + folder,
    "title": shortcut,
    "subtitle": subtitle,
    "arg": shortcut,
    "match": shortcut + " " + folder
  }
})

// Output JSON
JSON.stringify({ "items": sfItems })</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>List all shortcuts</string>
				<key>title</key>
				<string>Shortcuts</string>
				<key>type</key>
				<integer>7</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>0</integer>
				<key>script</key>
				<string># THESE VARIABLES MUST BE SET. SEE THE ONEUPDATER README FOR AN EXPLANATION OF EACH.
readonly remote_info_plist="https://raw.githubusercontent.com/alfredapp/shortcuts-workflow/master/Workflow/info.plist"
readonly workflow_url="alfredapp/shortcuts-workflow"
readonly download_type='github_release'
readonly frequency_check='4'

# FROM HERE ON, CODE SHOULD BE LEFT UNTOUCHED!
function abort {
  echo "${1}" &gt;&amp;2
  exit 1
}

function url_exists {
  curl --silent --location --output /dev/null --fail --range 0-0 "${1}"
}

function notification {
  local -r notificator="$(find . -type d -name 'Notificator.app')"
  if [[ -n "${notificator}" ]]; then
    "${notificator}/Contents/Resources/Scripts/notificator" --message "${1}" --title "${alfred_workflow_name}" --subtitle 'A new version is available'
    return
  fi

  local -r terminal_notifier="$(find . -type f -name 'terminal-notifier')"
  if [[ -n "${terminal_notifier}" ]]; then
    "${terminal_notifier}" -title "${alfred_workflow_name}" -subtitle 'A new version is available' -message "${1}"
    return
  fi

  osascript -e "display notification \"${1}\" with title \"${alfred_workflow_name}\" subtitle \"A new version is available\""
}

# Local sanity checks
readonly local_info_plist='info.plist'
readonly local_version="$(/usr/libexec/PlistBuddy -c 'print version' "${local_info_plist}")"

[[ -n "${local_version}" ]] || abort 'You need to set a workflow version in the configuration sheet.'
[[ "${download_type}" =~ ^(direct|page|github_release)$ ]] || abort "'download_type' (${download_type}) needs to be one of 'direct', 'page', or 'github_release'."
[[ "${frequency_check}" =~ ^[0-9]+$ ]] || abort "'frequency_check' (${frequency_check}) needs to be a number."

# Check for updates
if [[ $(find "${local_info_plist}" -mtime +"${frequency_check}"d) ]]; then
  if ! url_exists "${remote_info_plist}"; then abort "'remote_info_plist' (${remote_info_plist}) appears to not be reachable."; fi # Remote sanity check

  readonly tmp_file="$(mktemp)"
  curl --silent --location --output "${tmp_file}" "${remote_info_plist}"
  readonly remote_version="$(/usr/libexec/PlistBuddy -c 'print version' "${tmp_file}")"

  if [[ "${local_version}" == "${remote_version}" ]]; then
    touch "${local_info_plist}" # Reset timer by touching local file
    exit 0
  fi

  if [[ "${download_type}" == 'page' ]]; then
    notification 'Opening download page…'
    open "${workflow_url}"
    exit 0
  fi

  download_url="$([[ "${download_type}" == 'github_release' ]] &amp;&amp; curl --silent "https://api.github.com/repos/${workflow_url}/releases/latest" | grep 'browser_download_url' | head -1 | sed -E 's/.*browser_download_url": "(.*)"/\1/' || echo "${workflow_url}")"

  if url_exists "${download_url}"; then
    notification 'Downloading and installing…'
    curl --silent --location --output "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow" "${download_url}"
    open "${HOME}/Downloads/${alfred_workflow_name}.alfredworkflow"
  else
    abort "'workflow_url' (${download_url}) appears to not be reachable."
  fi
fi</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>005F1932-2C11-4E8E-823D-099B3FC1C00D</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>adduuid</key>
				<false/>
				<key>allowemptyfiles</key>
				<false/>
				<key>createintermediatefolders</key>
				<false/>
				<key>filename</key>
				<string>/tmp/com.alfredapp.shortcuts.workflowname.txt</string>
				<key>filetext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>relativepathmode</key>
				<integer>0</integer>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.writefile</string>
			<key>uid</key>
			<string>FA9FFB07-7249-47A4-A6CE-FB08B23064F9</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>acceptsmulti</key>
				<integer>1</integer>
				<key>filetypes</key>
				<array/>
				<key>name</key>
				<string>Run shortcut</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.action</string>
			<key>uid</key>
			<string>B6B11028-3EFA-4B12-A13A-D2E45B31EEDB</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string></string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>input_paths</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>CFFE2B9A-5D09-42D3-AA37-04D143AD527C</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>alfredfiltersresults</key>
				<true/>
				<key>alfredfiltersresultsmatchmode</key>
				<integer>2</integer>
				<key>argumenttreatemptyqueryasnil</key>
				<true/>
				<key>argumenttrimmode</key>
				<integer>0</integer>
				<key>argumenttype</key>
				<integer>1</integer>
				<key>escaping</key>
				<integer>102</integer>
				<key>keyword</key>
				<string>scd</string>
				<key>queuedelaycustom</key>
				<integer>3</integer>
				<key>queuedelayimmediatelyinitially</key>
				<true/>
				<key>queuedelaymode</key>
				<integer>0</integer>
				<key>queuemode</key>
				<integer>1</integer>
				<key>runningsubtext</key>
				<string>Getting shortcuts…</string>
				<key>script</key>
				<string>require 'json'
require 'open3'

Folders = Open3.capture2('/usr/bin/shortcuts', 'list', '--folders').first.split("\n")

Script_filter_items = Folders.each_with_object([]) { |folder, array|
  array.push(
    uid: folder,
    title: folder,
    arg: "#{folder} "
  )
}

puts({ items: Script_filter_items }.to_json)</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>subtext</key>
				<string>List shortcuts folders</string>
				<key>title</key>
				<string>Shortcuts Folders</string>
				<key>type</key>
				<integer>2</integer>
				<key>withspace</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.scriptfilter</string>
			<key>uid</key>
			<string>4CA0F7EA-3AF3-48FB-9F9A-AEF9797EDC3B</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>0</integer>
				<key>subtext</key>
				<string>{query}</string>
				<key>text</key>
				<string>Give {var:shortcut} argument</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>A4E64080-1FE3-4DC7-B236-87D07ED268B1</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string>{var:shortcut}</string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>argument</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>1536051B-9614-43F1-BAFF-69157E7507B5</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argument</key>
				<string></string>
				<key>passthroughargument</key>
				<false/>
				<key>variables</key>
				<dict>
					<key>shortcut</key>
					<string>{query}</string>
				</dict>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.argument</string>
			<key>uid</key>
			<string>6492FB28-292F-4EBA-AC97-1757CD7D9B1A</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>adduuid</key>
				<false/>
				<key>allowemptyfiles</key>
				<false/>
				<key>createintermediatefolders</key>
				<false/>
				<key>filename</key>
				<string>/tmp/com.alfredapp.shortcuts.workflowname.txt</string>
				<key>filetext</key>
				<string>{query}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>relativepathmode</key>
				<integer>0</integer>
				<key>type</key>
				<integer>1</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.writefile</string>
			<key>uid</key>
			<string>1323F48F-E437-45DD-B8A6-33410D2A376D</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>102</integer>
				<key>script</key>
				<string>readonly tmp_file="${1}"

/usr/bin/shortcuts view "$(&lt; "${tmp_file}")"

rm "${tmp_file}"</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>5</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>0A77AD31-D9B7-4FE5-869D-ADAB4C03C845</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>Run `sc` to list all your shortcuts or `scd` to quickly filter them by folder name. Press ↵ to action.

![](https://user-images.githubusercontent.com/1699443/167662709-8fc65f9d-a80d-468e-a1fc-3bf050014328.png)

To run a shortcut with an argument, use the Universal Action or invoke it with ⌘↵. Use the File Action to run a shortcut on a file.

⌥↵ opens the the shortcut for editing.</string>
	<key>uidata</key>
	<dict>
		<key>005F1932-2C11-4E8E-823D-099B3FC1C00D</key>
		<dict>
			<key>colorindex</key>
			<integer>12</integer>
			<key>note</key>
			<string>OneUpdater</string>
			<key>xpos</key>
			<integer>1190</integer>
			<key>ypos</key>
			<integer>205</integer>
		</dict>
		<key>0A77AD31-D9B7-4FE5-869D-ADAB4C03C845</key>
		<dict>
			<key>note</key>
			<string>Edit shortcut</string>
			<key>xpos</key>
			<integer>745</integer>
			<key>ypos</key>
			<integer>525</integer>
		</dict>
		<key>1323F48F-E437-45DD-B8A6-33410D2A376D</key>
		<dict>
			<key>note</key>
			<string>Bypass NSTask decomposition</string>
			<key>xpos</key>
			<integer>540</integer>
			<key>ypos</key>
			<integer>525</integer>
		</dict>
		<key>1536051B-9614-43F1-BAFF-69157E7507B5</key>
		<dict>
			<key>xpos</key>
			<integer>895</integer>
			<key>ypos</key>
			<integer>400</integer>
		</dict>
		<key>1DFB80A0-3BC8-4D10-B25F-5738F65D531B</key>
		<dict>
			<key>xpos</key>
			<integer>230</integer>
			<key>ypos</key>
			<integer>70</integer>
		</dict>
		<key>4CA0F7EA-3AF3-48FB-9F9A-AEF9797EDC3B</key>
		<dict>
			<key>note</key>
			<string>List shortcuts by folder name</string>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>370</integer>
		</dict>
		<key>6492FB28-292F-4EBA-AC97-1757CD7D9B1A</key>
		<dict>
			<key>note</key>
			<string>Run shortcut with argument</string>
			<key>xpos</key>
			<integer>620</integer>
			<key>ypos</key>
			<integer>400</integer>
		</dict>
		<key>8AD8B6B2-7CFD-4111-B81C-69158A3E4D4C</key>
		<dict>
			<key>note</key>
			<string>Prepare argument to run shortcut</string>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>40</integer>
		</dict>
		<key>A4E64080-1FE3-4DC7-B236-87D07ED268B1</key>
		<dict>
			<key>xpos</key>
			<integer>745</integer>
			<key>ypos</key>
			<integer>370</integer>
		</dict>
		<key>B6B11028-3EFA-4B12-A13A-D2E45B31EEDB</key>
		<dict>
			<key>note</key>
			<string>Prepare path to run shortcut</string>
			<key>xpos</key>
			<integer>50</integer>
			<key>ypos</key>
			<integer>205</integer>
		</dict>
		<key>BA85DFB6-430D-4198-BB43-D7C2754CBB51</key>
		<dict>
			<key>note</key>
			<string>Run shortcut</string>
			<key>xpos</key>
			<integer>965</integer>
			<key>ypos</key>
			<integer>205</integer>
		</dict>
		<key>CFFE2B9A-5D09-42D3-AA37-04D143AD527C</key>
		<dict>
			<key>xpos</key>
			<integer>230</integer>
			<key>ypos</key>
			<integer>235</integer>
		</dict>
		<key>EE84DB71-9CAA-4783-BFE6-528D7F1D1D47</key>
		<dict>
			<key>note</key>
			<string>List all shortcuts</string>
			<key>xpos</key>
			<integer>400</integer>
			<key>ypos</key>
			<integer>205</integer>
		</dict>
		<key>FA9FFB07-7249-47A4-A6CE-FB08B23064F9</key>
		<dict>
			<key>note</key>
			<string>Bypass NSTask decomposition</string>
			<key>xpos</key>
			<integer>745</integer>
			<key>ypos</key>
			<integer>205</integer>
		</dict>
	</dict>
	<key>version</key>
	<string>2022.7</string>
	<key>webaddress</key>
	<string>https://github.com/alfredapp/shortcuts-workflow/</string>
</dict>
</plist>
